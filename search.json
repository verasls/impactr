[{"path":"https://lveras.com/impactr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Lucas Veras Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"walk-through","dir":"Articles","previous_headings":"","what":"Walk-through","title":"Introduction to impactr","text":"begin, package needs installed loaded R session. don’t much experience using R, recommend install latest impactr release CRAN, running: package installed, loaded R session:","code":"install.packages(\"impactr\") library(impactr)"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"read_acc","dir":"Articles","previous_headings":"Walk-through","what":"read_acc()","title":"Introduction to impactr","text":"first step read raw accelerometer data R. using read_acc() function specifying path csv file containing raw accelerometer data: Remember currently impactr accepts raw data triaxial ActiGraph accelerometers. raw data, acceleration values stored gravitational acceleration units (1g = 9.81m·s-2). show package functionalities, impactr provides short example files. name files shown running: entering one file names argument impactr_example() function, obtain path example data, can pass read_acc(): output function assigned acc_data object R’s assignment operator (<-). can, , inspect object. shows data four columns – one timestamp one accelerometer axes (X, Y Z) – 6-line header metadata. Among metadata accelerometer data start time sampling frequency, extracted csv file header, also information accelerometer placement subject body mass, needed applying mechanical loading prediction models. also shows information filter applied accelerometer signal data dimensions (30000 rows 4 columns case). Remember , using function read data, need specify correct path . example, file named id_001_raw_acceleration.csv inside accelerometer_data folder Desktop, need write path :","code":"read_acc(\"path/to/file\") impactr_example() #> [1] \"hip-raw.csv\" acc_data <- read_acc(impactr_example(\"hip-raw.csv\")) acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         30,000 × 4 #>    timestamp           acc_X  acc_Y acc_Z #>    <dttm>              <dbl>  <dbl> <dbl> #>  1 2021-04-06 15:43:00 0.262 -0.688 0.063 #>  2 2021-04-06 15:43:00 0.25  -0.727 0.039 #>  3 2021-04-06 15:43:00 0.254 -0.816 0.191 #>  4 2021-04-06 15:43:00 0.258 -0.891 0.367 #>  5 2021-04-06 15:43:00 0.281 -0.914 0.344 #>  6 2021-04-06 15:43:00 0.316 -0.922 0.23  #>  7 2021-04-06 15:43:00 0.32  -0.891 0.203 #>  8 2021-04-06 15:43:00 0.332 -0.926 0.109 #>  9 2021-04-06 15:43:00 0.363 -1.02  0.168 #> 10 2021-04-06 15:43:00 0.418 -0.996 0.387 #> # … with 29,990 more rows #> # ℹ Use `print(n = ...)` to see more rows # For macOS or Linux read_acc(\"~/Desktop/accelerometer_data/id_001_raw_acceleration.csv\") # For Windows read_acc(\"C:/Users/username/Desktop/accelerometer_data/id_001_raw_acceleration.csv\")"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"define_region","dir":"Articles","previous_headings":"Walk-through","what":"define_region()","title":"Introduction to impactr","text":"define_region() optional function used want analyse specify portion data. use , must specify start end time region interest start_time end_time arguments, along data read read_acc() function data argument:","code":"acc_data <- define_region(   data = acc_data,   start_time = \"2021-04-06 15:45:00\",   end_time = \"2021-04-06 15:46:00\" ) acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         6,000 × 4 #>    timestamp            acc_X acc_Y acc_Z #>    <dttm>               <dbl> <dbl> <dbl> #>  1 2021-04-06 15:45:00 -0.148 -1.05 0.094 #>  2 2021-04-06 15:45:00 -0.098 -1.08 0.176 #>  3 2021-04-06 15:45:00 -0.055 -1.11 0.234 #>  4 2021-04-06 15:45:00 -0.035 -1.12 0.254 #>  5 2021-04-06 15:45:00 -0.02  -1.11 0.23  #>  6 2021-04-06 15:45:00 -0.004 -1.09 0.184 #>  7 2021-04-06 15:45:00  0.004 -1.06 0.152 #>  8 2021-04-06 15:45:00 -0.004 -1.08 0.152 #>  9 2021-04-06 15:45:00  0.008 -1.15 0.176 #> 10 2021-04-06 15:45:00  0.039 -1.20 0.195 #> # … with 5,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"specify_parameters","dir":"Articles","previous_headings":"Walk-through","what":"specify_parameters()","title":"Introduction to impactr","text":"Apart raw accelerometer data, mechanical loading prediction models need informations regarding accelerometer body placement subject body mass. informations provided impactr function specify_parameters(): supported accelerometer placements “ankle”, “back” “hip” body mass must given kilograms. Notice informations added data header.","code":"acc_data <- specify_parameters(   data = acc_data, acc_placement = \"hip\", subj_body_mass = 78 ) acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  No filter applied #> # Data dimensions:         6,000 × 4 #>    timestamp            acc_X acc_Y acc_Z #>    <dttm>               <dbl> <dbl> <dbl> #>  1 2021-04-06 15:45:00 -0.148 -1.05 0.094 #>  2 2021-04-06 15:45:00 -0.098 -1.08 0.176 #>  3 2021-04-06 15:45:00 -0.055 -1.11 0.234 #>  4 2021-04-06 15:45:00 -0.035 -1.12 0.254 #>  5 2021-04-06 15:45:00 -0.02  -1.11 0.23  #>  6 2021-04-06 15:45:00 -0.004 -1.09 0.184 #>  7 2021-04-06 15:45:00  0.004 -1.06 0.152 #>  8 2021-04-06 15:45:00 -0.004 -1.08 0.152 #>  9 2021-04-06 15:45:00  0.008 -1.15 0.176 #> 10 2021-04-06 15:45:00  0.039 -1.20 0.195 #> # … with 5,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"filter_acc","dir":"Articles","previous_headings":"Walk-through","what":"filter_acc()","title":"Introduction to impactr","text":"raw accelerometer data can digitally filtered reduce noise. filter_acc() function getting coefficients Butterworth digital filter applying twice (forwards backwards) acceleration signal. simplest way use call filter_acc() function supplying accelerometer data: function lets select order, cut-frequency type Butterworth filter (details function documentation help(filter_acc)). better reproduce conditions models validation performed, suggest change default values order, cutoff type arguments, unless strong reason .","code":"acc_data <- filter_acc(data = acc_data) acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         6,000 × 4 #>    timestamp               acc_X  acc_Y  acc_Z #>    <dttm>                  <dbl>  <dbl>  <dbl> #>  1 2021-04-06 15:45:00 -0.0900   -0.742 0.0878 #>  2 2021-04-06 15:45:00 -0.102    -1.08  0.171  #>  3 2021-04-06 15:45:00 -0.0768   -1.20  0.235  #>  4 2021-04-06 15:45:00 -0.0375   -1.16  0.253  #>  5 2021-04-06 15:45:00 -0.00870  -1.09  0.229  #>  6 2021-04-06 15:45:00  0.000810 -1.06  0.188  #>  7 2021-04-06 15:45:00 -0.00329  -1.07  0.156  #>  8 2021-04-06 15:45:00 -0.00753  -1.10  0.148  #>  9 2021-04-06 15:45:00  0.00602  -1.14  0.166  #> 10 2021-04-06 15:45:00  0.0510   -1.19  0.206  #> # … with 5,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"use_resultant","dir":"Articles","previous_headings":"Walk-through","what":"use_resultant()","title":"Introduction to impactr","text":"mechanical loading prediction models included impactr work either acceleration vertical vector resultant vector computed Euclidean norm three vectors \\((r = \\sqrt{X^2 + Y^2 + Z^2})\\). compute resultant can use use_resultant() function: function add new column acc_R resultant acceleration values. suggest utilise function filter_acc(), otherwise resultant vector computation use non-filtered acceleration signal.","code":"acc_data <- use_resultant(data = acc_data) acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         6,000 × 5 #>    timestamp               acc_X  acc_Y  acc_Z acc_R #>    <dttm>                  <dbl>  <dbl>  <dbl> <dbl> #>  1 2021-04-06 15:45:00 -0.0900   -0.742 0.0878 0.753 #>  2 2021-04-06 15:45:00 -0.102    -1.08  0.171  1.10  #>  3 2021-04-06 15:45:00 -0.0768   -1.20  0.235  1.22  #>  4 2021-04-06 15:45:00 -0.0375   -1.16  0.253  1.18  #>  5 2021-04-06 15:45:00 -0.00870  -1.09  0.229  1.11  #>  6 2021-04-06 15:45:00  0.000810 -1.06  0.188  1.07  #>  7 2021-04-06 15:45:00 -0.00329  -1.07  0.156  1.08  #>  8 2021-04-06 15:45:00 -0.00753  -1.10  0.148  1.11  #>  9 2021-04-06 15:45:00  0.00602  -1.14  0.166  1.15  #> 10 2021-04-06 15:45:00  0.0510   -1.19  0.206  1.21  #> # … with 5,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"find_peaks","dir":"Articles","previous_headings":"Walk-through","what":"find_peaks()","title":"Introduction to impactr","text":"apply prediction models, peaks acceleration signal found. find_peaks() function returns timestamp peak column magnitude another. vector argument controls vector peaks found can set either vertical, resultant . filter_acc(), find_peaks() default values minimum height (min_height) distance (min_dist) peaks set replicate values used calibration study. change strong reason .","code":"acc_data <- find_peaks(data = acc_data, vector = \"resultant\") acc_data #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         32 × 2 #>    timestamp           resultant_peak_acc #>    <dttm>                           <dbl> #>  1 2021-04-06 15:45:00               1.32 #>  2 2021-04-06 15:45:01               1.36 #>  3 2021-04-06 15:45:04               1.30 #>  4 2021-04-06 15:45:04               2.32 #>  5 2021-04-06 15:45:05               1.50 #>  6 2021-04-06 15:45:06               1.68 #>  7 2021-04-06 15:45:06               1.51 #>  8 2021-04-06 15:45:07               1.96 #>  9 2021-04-06 15:45:08               1.37 #> 10 2021-04-06 15:45:08               1.86 #> # … with 22 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"predict_loading","dir":"Articles","previous_headings":"Walk-through","what":"predict_loading()","title":"Introduction to impactr","text":"Finally, predict_loading() used predict mechanical loading variables based acceleration signal. Currently, impactr provides models predict ground reaction force (GRF) loading rate (LR) resultant vector vertical component models validated walking running activities. outcome, vector model arguments used control parameters. details regarding values accepted parameters can found function documentation (help(predict_loading)). can seen , predict_loading() adds columns supplied data corresponding outcome vector specified arguments. Note GRF expressed newton (N) LR newton per second (N·s-1)","code":"predict_loading(   data = acc_data,   outcome = \"grf\",   vector = \"resultant\",   model = \"walking/running\" ) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         32 × 3 #>    timestamp           resultant_peak_acc resultant_peak_grf #>    <dttm>                           <dbl>              <dbl> #>  1 2021-04-06 15:45:00               1.32              1466. #>  2 2021-04-06 15:45:01               1.36              1469. #>  3 2021-04-06 15:45:04               1.30              1464. #>  4 2021-04-06 15:45:04               2.32              1543. #>  5 2021-04-06 15:45:05               1.50              1480. #>  6 2021-04-06 15:45:06               1.68              1494. #>  7 2021-04-06 15:45:06               1.51              1480. #>  8 2021-04-06 15:45:07               1.96              1515. #>  9 2021-04-06 15:45:08               1.37              1470. #> 10 2021-04-06 15:45:08               1.86              1508. #> # … with 22 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/articles/impactr.html","id":"wrap-up","dir":"Articles","previous_headings":"","what":"Wrap up","title":"Introduction to impactr","text":"impactr helps move raw accelerometer data discrete estimates mechanical loading variables easy way. functions necessary analysis described step--step manner. functions also designed used pipe operators (either magrittr package base R package R version >= 4.1.0). using pipe, output function call passed directly next, avoiding nested function calls need assign local variables. examples whole analysis assigning local variables intermediate steps using base R pipe:","code":"# Using intermediate steps acc_data <- read_acc(impactr_example(\"hip-raw.csv\")) acc_data <- specify_parameters(   data = acc_data, acc_placement = \"hip\", subj_body_mass = 78 ) acc_data <- filter_acc(data = acc_data) acc_data <- use_resultant(data = acc_data) acc_data <- find_peaks(data = acc_data, vector = \"resultant\") acc_data <- predict_loading(   data = acc_data,   outcome = \"grf\",   vector = \"resultant\",   model = \"walking/running\" )  # Using the base R pipe operator read_acc(impactr_example(\"hip-raw.csv\")) |>   specify_parameters(acc_placement = \"hip\", subj_body_mass = 78) |>   filter_acc() |>   use_resultant() |>   find_peaks(vector = \"resultant\") |>   predict_loading(     outcome = \"grf\",     vector = \"resultant\",     model = \"walking/running\"   )"},{"path":"https://lveras.com/impactr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucas Veras. Author, maintainer.","code":""},{"path":"https://lveras.com/impactr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Veras L (2022). impactr: Mechanical Loading Prediction Accelerometer Data. R package version 0.4.1, https://lveras.com/impactr/.","code":"@Manual{,   title = {impactr: Mechanical Loading Prediction Through Accelerometer Data},   author = {Lucas Veras},   year = {2022},   note = {R package version 0.4.1},   url = {https://lveras.com/impactr/}, }"},{"path":"https://lveras.com/impactr/index.html","id":"impactr-","dir":"","previous_headings":"","what":"Mechanical Loading Prediction Through Accelerometer Data","title":"Mechanical Loading Prediction Through Accelerometer Data","text":"impactr package functions read, process analyse raw accelerometer data related mechanical loading variables. can learn package features use vignette(\"impactr\").","code":""},{"path":"https://lveras.com/impactr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mechanical Loading Prediction Through Accelerometer Data","text":"install latest stable version impactr CRAN, run: can also install development version GitHub :","code":"install.packages(\"impactr\") # install.packages(\"devtools\") devtools::install_github(\"verasls/impactr\")"},{"path":"https://lveras.com/impactr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Mechanical Loading Prediction Through Accelerometer Data","text":"","code":"library(impactr)  read_acc(impactr_example(\"hip-raw.csv\")) |>  define_region(     start_time = \"2021-04-06 15:45:00\",     end_time = \"2021-04-06 15:45:30\"   ) |>   specify_parameters(     acc_placement = \"hip\",     subj_body_mass = 78   ) |>   filter_acc() |>   use_resultant() |>   find_peaks(vector = \"resultant\") |>   predict_loading(     outcome = \"grf\",     vector = \"resultant\",     model = \"walking/running\"   ) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         26 × 3 #>    timestamp           resultant_peak_acc resultant_peak_grf #>    <dttm>                           <dbl>              <dbl> #>  1 2021-04-06 15:45:00               1.32              1387. #>  2 2021-04-06 15:45:01               1.36              1392. #>  3 2021-04-06 15:45:04               1.30              1384. #>  4 2021-04-06 15:45:04               2.32              1521. #>  5 2021-04-06 15:45:05               1.50              1412. #>  6 2021-04-06 15:45:06               1.68              1435. #>  7 2021-04-06 15:45:06               1.51              1412. #>  8 2021-04-06 15:45:07               1.96              1473. #>  9 2021-04-06 15:45:08               1.37              1393. #> 10 2021-04-06 15:45:08               1.86              1459. #> # … with 16 more rows"},{"path":"https://lveras.com/impactr/reference/define_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Define region of interest — define_region","title":"Define region of interest — define_region","text":"Define region interest data analysis based accelerometer data timestamp.","code":""},{"path":"https://lveras.com/impactr/reference/define_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define region of interest — define_region","text":"","code":"define_region(data, start_time, end_time)"},{"path":"https://lveras.com/impactr/reference/define_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define region of interest — define_region","text":"data impactr_data object, obtained read_acc(). start_time, end_time character string start end times region interest \"YYYY-MM-DD HH:MM:SS\" format.","code":""},{"path":"https://lveras.com/impactr/reference/define_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define region of interest — define_region","text":"object class impactr_data.","code":""},{"path":"https://lveras.com/impactr/reference/define_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define region of interest — define_region","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) define_region(   data, start_time = \"2021-04-06 15:45:00\", end_time = \"2021-04-06 15:46:00\" ) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         6,000 × 4 #>    timestamp            acc_X acc_Y acc_Z #>    <dttm>               <dbl> <dbl> <dbl> #>  1 2021-04-06 15:45:00 -0.148 -1.05 0.094 #>  2 2021-04-06 15:45:00 -0.098 -1.08 0.176 #>  3 2021-04-06 15:45:00 -0.055 -1.11 0.234 #>  4 2021-04-06 15:45:00 -0.035 -1.12 0.254 #>  5 2021-04-06 15:45:00 -0.02  -1.11 0.23  #>  6 2021-04-06 15:45:00 -0.004 -1.09 0.184 #>  7 2021-04-06 15:45:00  0.004 -1.06 0.152 #>  8 2021-04-06 15:45:00 -0.004 -1.08 0.152 #>  9 2021-04-06 15:45:00  0.008 -1.15 0.176 #> 10 2021-04-06 15:45:00  0.039 -1.20 0.195 #> # … with 5,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/delete_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete accelerometer non-wear time — delete_nonwear","title":"Delete accelerometer non-wear time — delete_nonwear","text":"Deletes periods marked non-wear.","code":""},{"path":"https://lveras.com/impactr/reference/delete_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete accelerometer non-wear time — delete_nonwear","text":"","code":"delete_nonwear(data)"},{"path":"https://lveras.com/impactr/reference/delete_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete accelerometer non-wear time — delete_nonwear","text":"data impactr_data object wear column, obtained mark_nonwear().","code":""},{"path":"https://lveras.com/impactr/reference/delete_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete accelerometer non-wear time — delete_nonwear","text":"impactr_data object provided data without wear column non-wear time removed.","code":""},{"path":"https://lveras.com/impactr/reference/delete_nonwear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete accelerometer non-wear time — delete_nonwear","text":"internal function, designed used inside wrapper function remove_nonwear() integrates steps detection, removal inspection accelerometer non-wear time.","code":""},{"path":[]},{"path":"https://lveras.com/impactr/reference/detect_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of accelerometer non-wear time — detect_nonwear","title":"Detection of accelerometer non-wear time — detect_nonwear","text":"Implementation van Hees algorithm non-wear detection.","code":""},{"path":"https://lveras.com/impactr/reference/detect_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of accelerometer non-wear time — detect_nonwear","text":"","code":"detect_nonwear(data, window1, window2, threshold)"},{"path":"https://lveras.com/impactr/reference/detect_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of accelerometer non-wear time — detect_nonwear","text":"data impactr_data object, obtained read_acc(). window1, window2 Windows size, minutes, non-wear detection algorithm. window2 must smaller window1, window1 must multiple window2. threshold Number axes need meet non-wear criteria.","code":""},{"path":"https://lveras.com/impactr/reference/detect_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of accelerometer non-wear time — detect_nonwear","text":"named list length 2 (stage1 stage2) containing binary non-wear classification (0 wear 1 non-wear) algorithm's stage per window2 blocks.","code":""},{"path":"https://lveras.com/impactr/reference/detect_nonwear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detection of accelerometer non-wear time — detect_nonwear","text":"internal function, designed used inside wrapper function remove_nonwear() integrates steps detection, removal inspection accelerometer non-wear time.","code":""},{"path":[]},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the acceleration signal — filter_acc","title":"Filter the acceleration signal — filter_acc","text":"Filter acceleration signal using butterworth digital filter.","code":""},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the acceleration signal — filter_acc","text":"","code":"filter_acc(data, order = 4, cutoff = 20, type = \"lowpass\")"},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the acceleration signal — filter_acc","text":"data impactr_data object, obtained read_acc(). order order filter. Defaults 4. cutoff filter cut-frequency Hz. Defaults 20. low- high-pass filters, must scalar. band-pass band- stop, vector length two. type type filter. Defaults \"lowpass\". Can \"lowpass\", \"highpass\", \"bandpass\" \"bandstop\".","code":""},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the acceleration signal — filter_acc","text":"object class impactr_data.","code":""},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the acceleration signal — filter_acc","text":"default values filter parameters matching filter used paper Veras et al. developed mechanical loading prediction equations (see References).","code":""},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter the acceleration signal — filter_acc","text":"Veras L, Diniz-Sousa F, Boppre G, Devezas V, Santos-Sousa H, Preto J, Machado L, Vilas- Boas JP, Oliveira J, Fonseca H. Accelerometer-based prediction skeletal mechanical loading walking normal weight severely obese subjects. Osteoporosis International. 2020. 31(7):1239- 1250. doi:10.1007/s00198-020-05295-2 .","code":""},{"path":"https://lveras.com/impactr/reference/filter_acc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the acceleration signal — filter_acc","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) filter_acc(data) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  Butterworth (4th-ord, low-pass, 20Hz) #> # Data dimensions:         30,000 × 4 #>    timestamp           acc_X  acc_Y  acc_Z #>    <dttm>              <dbl>  <dbl>  <dbl> #>  1 2021-04-06 15:43:00 0.180 -0.483 0.0182 #>  2 2021-04-06 15:43:00 0.254 -0.738 0.0948 #>  3 2021-04-06 15:43:00 0.276 -0.876 0.216  #>  4 2021-04-06 15:43:00 0.268 -0.909 0.315  #>  5 2021-04-06 15:43:00 0.269 -0.892 0.327  #>  6 2021-04-06 15:43:00 0.298 -0.878 0.259  #>  7 2021-04-06 15:43:00 0.340 -0.906 0.185  #>  8 2021-04-06 15:43:00 0.360 -0.978 0.164  #>  9 2021-04-06 15:43:00 0.340 -1.03  0.188  #> 10 2021-04-06 15:43:00 0.305 -0.978 0.234  #> # … with 29,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find peaks in a signal — find_peaks","title":"Find peaks in a signal — find_peaks","text":"Find peaks acceleration signal.","code":""},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find peaks in a signal — find_peaks","text":"","code":"find_peaks(data, vector, min_height = 1.3, min_dist = 0.4)"},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find peaks in a signal — find_peaks","text":"data impactr_data object, obtained read_acc(). vector character string indicating acceleration vector find peaks. Can \"resultant\", \"vertical\" \"\". min_height minimum height peaks (g). min_dist minimum horizontal distance peaks (seconds).","code":""},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find peaks in a signal — find_peaks","text":"object class impactr_peaks peaks magnitude stored columns.","code":""},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find peaks in a signal — find_peaks","text":"default values filter parameters matching filter used paper Veras et al. developed mechanical loading prediction equations (see References). vector parameter set \"\", may contain NA values resultant_peak_acc /vertical_peak_acc timestamps peak value vector identified. default values min_height min_dist matching criteria used paper Veras et al. developed mechanical loading prediction equations (see References)","code":""},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find peaks in a signal — find_peaks","text":"Veras L, Diniz-Sousa F, Boppre G, Devezas V, Santos-Sousa H, Preto J, Machado L, Vilas- Boas JP, Oliveira J, Fonseca H. Accelerometer-based prediction skeletal mechanical loading walking normal weight severely obese subjects. Osteoporosis International. 2020. 31(7):1239- 1250. doi:10.1007/s00198-020-05295-2 .","code":""},{"path":"https://lveras.com/impactr/reference/find_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find peaks in a signal — find_peaks","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) data <- use_resultant(data) find_peaks(data, vector = \"resultant\") #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         303 × 2 #>    timestamp           resultant_peak_acc #>    <dttm>                           <dbl> #>  1 2021-04-06 15:43:00               2.24 #>  2 2021-04-06 15:43:00               1.43 #>  3 2021-04-06 15:43:02               1.49 #>  4 2021-04-06 15:43:03               1.68 #>  5 2021-04-06 15:43:04               1.49 #>  6 2021-04-06 15:43:04               1.30 #>  7 2021-04-06 15:43:05               2.13 #>  8 2021-04-06 15:43:05               1.34 #>  9 2021-04-06 15:43:06               1.39 #> 10 2021-04-06 15:43:07               1.46 #> # … with 293 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/impactr_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to example data — impactr_example","title":"Get path to example data — impactr_example","text":"impactr comes example ActiGraph accelerometer raw data files inst/extdata directory. function make easy access.","code":""},{"path":"https://lveras.com/impactr/reference/impactr_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to example data — impactr_example","text":"","code":"impactr_example(file = NULL)"},{"path":"https://lveras.com/impactr/reference/impactr_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to example data — impactr_example","text":"file character string file name. NULL, example files listed.","code":""},{"path":"https://lveras.com/impactr/reference/impactr_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to example data — impactr_example","text":"file = NULL, returns file names example data files, else returns path example data.","code":""},{"path":"https://lveras.com/impactr/reference/impactr_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to example data — impactr_example","text":"","code":"impactr_example() #> [1] \"hip-raw.csv\" impactr_example(\"hip-raw.csv\") #> [1] \"/Users/runner/work/_temp/Library/impactr/extdata/hip-raw.csv\""},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Import datasets from accdata package — import_dataset","title":"Import datasets from accdata package — import_dataset","text":"helper function import datasets accdata package.","code":""},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import datasets from accdata package — import_dataset","text":"","code":"import_dataset(data)"},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import datasets from accdata package — import_dataset","text":"data character string indicating data load. currently available datasets \"daily_acc_3d\" \"daily_acc_7d\".","code":""},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import datasets from accdata package — import_dataset","text":"object class impactr_data.","code":""},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import datasets from accdata package — import_dataset","text":"import datasets need install accdata package. can installed running install_accdata(). datasets documentation can accessed ?accdata::`dataset_name` (e.g., ?accdata::daily_acc_3d.","code":""},{"path":"https://lveras.com/impactr/reference/import_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import datasets from accdata package — import_dataset","text":"","code":"# Ensure that {accdata} package is available before running the example. # If it is not, run install_accdata() to install the required package. if (requireNamespace(\"accdata\", quietly = TRUE)) {   data <- import_dataset(\"daily_acc_3d\")   data } #> # Start time:              2016-01-20 00:01:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Back #> # Subject body mass:       119kg #> # Filter:                  No filter applied #> # Data dimensions:         25,913,900 × 4 #>    timestamp           acc_X acc_Y  acc_Z #>    <dttm>              <dbl> <dbl>  <dbl> #>  1 2016-01-20 00:01:00 0.182 0.944 -0.214 #>  2 2016-01-20 00:01:00 0.185 0.938 -0.211 #>  3 2016-01-20 00:01:00 0.185 0.944 -0.208 #>  4 2016-01-20 00:01:00 0.182 0.947 -0.208 #>  5 2016-01-20 00:01:00 0.185 0.944 -0.208 #>  6 2016-01-20 00:01:00 0.188 0.944 -0.208 #>  7 2016-01-20 00:01:00 0.188 0.947 -0.208 #>  8 2016-01-20 00:01:00 0.188 0.947 -0.208 #>  9 2016-01-20 00:01:00 0.185 0.947 -0.208 #> 10 2016-01-20 00:01:00 0.188 0.944 -0.202 #> # … with 25,913,890 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/install_accdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Install accdata package — install_accdata","title":"Install accdata package — install_accdata","text":"helper function install accdata package drat repository. accdata package contains datasets can used test functionalities impactr. Note accdata large package (approximately 80 MB) take download install.","code":""},{"path":"https://lveras.com/impactr/reference/install_accdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install accdata package — install_accdata","text":"","code":"install_accdata()"},{"path":"https://lveras.com/impactr/reference/is_impactr.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is from the impactr package — is_impactr","title":"Test if the object is from the impactr package — is_impactr","text":"Test object impactr package","code":""},{"path":"https://lveras.com/impactr/reference/is_impactr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is from the impactr package — is_impactr","text":"","code":"is_impactr_data(x)  is_impactr_peaks(x)"},{"path":"https://lveras.com/impactr/reference/is_impactr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is from the impactr package — is_impactr","text":"x object.","code":""},{"path":"https://lveras.com/impactr/reference/is_impactr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is from the impactr package — is_impactr","text":"TRUE object inherits class evaluated.","code":""},{"path":"https://lveras.com/impactr/reference/mark_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark accelerometer non-wear time — mark_nonwear","title":"Mark accelerometer non-wear time — mark_nonwear","text":"Creates new column, named wear, impactr_data object provided data indicating classification wear non-wear time.","code":""},{"path":"https://lveras.com/impactr/reference/mark_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark accelerometer non-wear time — mark_nonwear","text":"","code":"mark_nonwear(data, nonwear_stage1, nonwear_stage2, window2)"},{"path":"https://lveras.com/impactr/reference/mark_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark accelerometer non-wear time — mark_nonwear","text":"data impactr_data object, obtained read_acc(). nonwear_stage1, nonwear_stage2 numeric vector containing binary non-wear classification (0 wear 1 non-wear) algorithm's stage per window2 blocks obtained detect_nonwear() function. window2 Window 2 size, minutes, non-wear detection algorithm. Must value used detect_nonwear() function.","code":""},{"path":"https://lveras.com/impactr/reference/mark_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark accelerometer non-wear time — mark_nonwear","text":"impactr_data object provided data new column named wear binary wear classification (0 non-wear 1 wear) per sample. Notice binary classification regarding wear time non-wear.","code":""},{"path":"https://lveras.com/impactr/reference/mark_nonwear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark accelerometer non-wear time — mark_nonwear","text":"internal function, designed used inside wrapper function remove_nonwear() integrates steps detection, removal inspection accelerometer non-wear time.","code":""},{"path":[]},{"path":"https://lveras.com/impactr/reference/new_impactr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for impactr_data object — new_impactr_data","title":"Constructor for impactr_data object — new_impactr_data","text":"Constructor impactr_data object","code":""},{"path":"https://lveras.com/impactr/reference/new_impactr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for impactr_data object — new_impactr_data","text":"","code":"new_impactr_data(   x,   filename,   start_date_time,   samp_freq,   acc_placement,   subj_body_mass,   filter_type )"},{"path":"https://lveras.com/impactr/reference/new_impactr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for impactr_data object — new_impactr_data","text":"x data frame. start_date_time scalar class POSIXct. samp_freq numerical scalar acc_placement character scalar subj_body_mass numerical scalar filter_type character scalar","code":""},{"path":"https://lveras.com/impactr/reference/new_impactr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for impactr_data object — new_impactr_data","text":"object impactr_data class.","code":""},{"path":"https://lveras.com/impactr/reference/new_impactr_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for impactr_peaks object — new_impactr_peaks","title":"Constructor for impactr_peaks object — new_impactr_peaks","text":"Constructor impactr_peaks object","code":""},{"path":"https://lveras.com/impactr/reference/new_impactr_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for impactr_peaks object — new_impactr_peaks","text":"","code":"new_impactr_peaks(   x,   filename,   start_date_time,   samp_freq,   acc_placement,   subj_body_mass,   filter_type,   peaks_idx,   curve_start,   acc_signal )"},{"path":"https://lveras.com/impactr/reference/new_impactr_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for impactr_peaks object — new_impactr_peaks","text":"x data frame. start_date_time scalar class POSIXct. samp_freq numerical scalar acc_placement character scalar subj_body_mass numerical scalar filter_type character scalar peaks_idx numerical vector curve_start numerical vector acc_signal: numeric vector","code":""},{"path":"https://lveras.com/impactr/reference/new_impactr_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for impactr_peaks object — new_impactr_peaks","text":"object impactr_peaks class.","code":""},{"path":"https://lveras.com/impactr/reference/plot_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the non-wear time detection — plot_nonwear","title":"Plot the non-wear time detection — plot_nonwear","text":"Draws plot resultant acceleration epochs window2 size marking non-wear time detected stage non-wear detection algorithm.","code":""},{"path":"https://lveras.com/impactr/reference/plot_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the non-wear time detection — plot_nonwear","text":"","code":"plot_nonwear(data, window2, nonwear_stage1, nonwear_stage2, save_plot)"},{"path":"https://lveras.com/impactr/reference/plot_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the non-wear time detection — plot_nonwear","text":"data impactr_data object, obtained read_acc(). window2 Window 2 size, minutes, non-wear detection algorithm. Must value used detect_nonwear() function. nonwear_stage1, nonwear_stage2 numeric vector containing binary non-wear classification (0 wear 1 non-wear) algorithm's stage per window2 blocks obtained detect_nonwear() function. save_plot Indicates whether save plot visualize detected non-wear periods pdf file. Provide valid path file ending \".pdf\" extension character string want plot saved.","code":""},{"path":"https://lveras.com/impactr/reference/plot_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the non-wear time detection — plot_nonwear","text":"save_plot = FALSE returns plot, otherwise saves .","code":""},{"path":"https://lveras.com/impactr/reference/plot_nonwear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the non-wear time detection — plot_nonwear","text":"internal function, designed used inside wrapper function remove_nonwear() integrates steps detection, removal inspection accelerometer non-wear time.","code":""},{"path":[]},{"path":"https://lveras.com/impactr/reference/predict_loading.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict mechanical loading — predict_loading","title":"Predict mechanical loading — predict_loading","text":"Predict either ground reaction force loading rate, , based accelerometer data.","code":""},{"path":"https://lveras.com/impactr/reference/predict_loading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict mechanical loading — predict_loading","text":"","code":"predict_loading(data, outcome, vector, model)"},{"path":"https://lveras.com/impactr/reference/predict_loading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict mechanical loading — predict_loading","text":"data impactr_data object, obtained read_acc(). outcome character string. Can either \"grf\" (ground reaction force), \"lr\" (loading rate) \"\" (mechanical loading variables). vector character string indicating acceleration vector find peaks. Can \"resultant\", \"vertical\" \"\". model character string indicating model use make predictions. values currently supported \"walking\", \"walking/running\" \"jumping\".","code":""},{"path":"https://lveras.com/impactr/reference/predict_loading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict mechanical loading — predict_loading","text":"object class impactr_peaks ground reaction force /loading rate peaks magnitude stored columns.","code":""},{"path":"https://lveras.com/impactr/reference/predict_loading.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict mechanical loading — predict_loading","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) data <- specify_parameters(data, acc_placement = \"hip\", subj_body_mass = 78) data <- find_peaks(data, vector = \"vertical\") predict_loading(   data,   outcome = \"grf\",   vector = \"vertical\",   model = \"walking/running\" ) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       78kg #> # Filter:                  No filter applied #> # Data dimensions:         251 × 3 #>    timestamp           vertical_peak_acc vertical_peak_grf #>    <dttm>                          <dbl>             <dbl> #>  1 2021-04-06 15:43:00              1.83             1485. #>  2 2021-04-06 15:43:03              1.41             1449. #>  3 2021-04-06 15:43:04              1.59             1464. #>  4 2021-04-06 15:43:06              1.35             1443. #>  5 2021-04-06 15:43:09              2.61             1554. #>  6 2021-04-06 15:43:11              1.38             1446. #>  7 2021-04-06 15:43:14              1.42             1450. #>  8 2021-04-06 15:43:16              1.36             1445. #>  9 2021-04-06 15:43:16              1.46             1454. #> 10 2021-04-06 15:43:17              1.32             1441. #> # … with 241 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/read_acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read raw accelerometer data — read_acc","title":"Read raw accelerometer data — read_acc","text":"Reads raw accelerometer data files impactr_data object.","code":""},{"path":"https://lveras.com/impactr/reference/read_acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read raw accelerometer data — read_acc","text":"","code":"read_acc(file)"},{"path":"https://lveras.com/impactr/reference/read_acc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read raw accelerometer data — read_acc","text":"file Path raw accelerometer data file.","code":""},{"path":"https://lveras.com/impactr/reference/read_acc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read raw accelerometer data — read_acc","text":"object class impactr_data.","code":""},{"path":"https://lveras.com/impactr/reference/read_acc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read raw accelerometer data — read_acc","text":"","code":"read_acc(impactr_example(\"hip-raw.csv\")) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         30,000 × 4 #>    timestamp           acc_X  acc_Y acc_Z #>    <dttm>              <dbl>  <dbl> <dbl> #>  1 2021-04-06 15:43:00 0.262 -0.688 0.063 #>  2 2021-04-06 15:43:00 0.25  -0.727 0.039 #>  3 2021-04-06 15:43:00 0.254 -0.816 0.191 #>  4 2021-04-06 15:43:00 0.258 -0.891 0.367 #>  5 2021-04-06 15:43:00 0.281 -0.914 0.344 #>  6 2021-04-06 15:43:00 0.316 -0.922 0.23  #>  7 2021-04-06 15:43:00 0.32  -0.891 0.203 #>  8 2021-04-06 15:43:00 0.332 -0.926 0.109 #>  9 2021-04-06 15:43:00 0.363 -1.02  0.168 #> 10 2021-04-06 15:43:00 0.418 -0.996 0.387 #> # … with 29,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and remove accelerometer non-wear time — remove_nonwear","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"Detects accelerometer non-wear time based algorithm developed van Hees (see Details) remove periods raw data. function can also draw plot better visualize detected non-wear periods generate wear time daily summary.","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"","code":"remove_nonwear(   data,   window1 = 60,   window2 = 15,   threshold = 2,   min_hour_crit = 0,   min_day_crit = 0,   plot = FALSE,   save_plot = FALSE,   save_summary = FALSE )"},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"data impactr_data object, obtained read_acc(). window1, window2 Windows size, minutes, non-wear detection algorithm. Defaults 60 15 minutes, respectively. Also, window2 must smaller window1, window1 must multiple window2. threshold Number axes need meet non-wear criteria. Defaults 2. min_hour_crit minimum number hours marked wear time day considered valid (see Data validation). Defaults 0, meaning every day considered valid. min_day_crit minimum number valid days data given subject considered valid (see Data validation). Defaults 0, meaning data valid. plot logical value indicating whether display plot visualize detected non-wear periods. Defaults FALSE. Notice plot displayed R session provide path save plot (see argument save_plot). save_plot, save_summary Indicates whether save plot visualize detected non-wear periods pdf file wear time daily summary csv file, respectively. Defaults FALSE. Provide valid path file, ending \".pdf\" extension plot \".csv\" extension summary, character string want outputs saved.","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"object class impactr_data plot plot = TRUE save_plot = FALSE.","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"the-non-wear-detection-algorithm","dir":"Reference","previous_headings":"","what":"The non-wear detection algorithm","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"current version algorithm described paper van Hees et al (see References) also vignette package GGIR. Briefly, first stage identifies non-wear time based threshold values standard deviation (0.013g) range (0.050g) raw acceleration axis. classification done per blocks window2 size (default 15 minutes) based characteristics larger window1 (default 60 minutes) centred window2. second stage algorithm, plausibility wear periods non-wear periods tested based duration proportion duration relative surrounding non-wear periods.","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"data-validation","dir":"Reference","previous_headings":"","what":"Data validation","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"detection non-wear periods algorithm, data validation step applied. measurement day considered valid, present minimum number wear time hours determined min_hour_crit argument. number wear time hours given day falls threshold, whole day considered invalid removed subsequent analyses. whole measurement also classified valid invalid based number valid days threshold given min_day_crit. number valid days less value determined min_day_crit argument, whole data deleted remove_nonwear() function signals error, stopping execution. Nevertheless, error prevent plot displayed saved, wear time daily summary saved, arguments set .","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"van Hees VT, Gorzelniak L, Dean León EC, Eder M, Pias M, Taherian S, Ekelund U, Renström F, Franks PW, Horsch , Brage S. Separating movement gravity components acceleration signal implications assessment human daily physical activity. PLoS One. 2013. Apr 23. doi:10.1371/journal.pone.0061691 .","code":""},{"path":"https://lveras.com/impactr/reference/remove_nonwear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect and remove accelerometer non-wear time — remove_nonwear","text":"","code":"# Ensure that {accdata} package is available before running the example. # If it is not, run install_accdata() to install the required package. if (requireNamespace(\"accdata\", quietly = TRUE)) {   data <- import_dataset(\"daily_acc_3d\")   remove_nonwear(data) } #> # Start time:              2016-01-20 00:01:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Back #> # Subject body mass:       119kg #> # Filter:                  No filter applied #> # Data dimensions:         18,180,000 × 4 #>    timestamp           acc_X acc_Y acc_Z #>    <dttm>              <dbl> <dbl> <dbl> #>  1 2016-01-20 07:01:00 0.176 0.021  1.01 #>  2 2016-01-20 07:01:00 0.176 0.021  1.01 #>  3 2016-01-20 07:01:00 0.176 0.021  1.01 #>  4 2016-01-20 07:01:00 0.176 0.021  1.01 #>  5 2016-01-20 07:01:00 0.176 0.021  1.01 #>  6 2016-01-20 07:01:00 0.176 0.021  1.01 #>  7 2016-01-20 07:01:00 0.176 0.021  1.01 #>  8 2016-01-20 07:01:00 0.176 0.021  1.01 #>  9 2016-01-20 07:01:00 0.176 0.021  1.01 #> 10 2016-01-20 07:01:00 0.176 0.021  1.01 #> # … with 18,179,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/specify_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify prediction model parameters — specify_parameters","title":"Specify prediction model parameters — specify_parameters","text":"Specify accelerometer placement used subject body mass. data needed order use mechanical loading prediction models.","code":""},{"path":"https://lveras.com/impactr/reference/specify_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify prediction model parameters — specify_parameters","text":"","code":"specify_parameters(data, acc_placement, subj_body_mass)"},{"path":"https://lveras.com/impactr/reference/specify_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify prediction model parameters — specify_parameters","text":"data impactr_data object, obtained read_acc(). acc_placement character string indicating accelerometer placement. Can either \"ankle\", \"back\", \"hip\". subj_body_mass double scalar indicating subject body mass kilograms.","code":""},{"path":"https://lveras.com/impactr/reference/specify_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify prediction model parameters — specify_parameters","text":"object class impactr_data specified parameters attributes.","code":""},{"path":"https://lveras.com/impactr/reference/specify_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify prediction model parameters — specify_parameters","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) specify_parameters(data, acc_placement = \"hip\", subj_body_mass = 79.2) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Hip #> # Subject body mass:       79.2kg #> # Filter:                  No filter applied #> # Data dimensions:         30,000 × 4 #>    timestamp           acc_X  acc_Y acc_Z #>    <dttm>              <dbl>  <dbl> <dbl> #>  1 2021-04-06 15:43:00 0.262 -0.688 0.063 #>  2 2021-04-06 15:43:00 0.25  -0.727 0.039 #>  3 2021-04-06 15:43:00 0.254 -0.816 0.191 #>  4 2021-04-06 15:43:00 0.258 -0.891 0.367 #>  5 2021-04-06 15:43:00 0.281 -0.914 0.344 #>  6 2021-04-06 15:43:00 0.316 -0.922 0.23  #>  7 2021-04-06 15:43:00 0.32  -0.891 0.203 #>  8 2021-04-06 15:43:00 0.332 -0.926 0.109 #>  9 2021-04-06 15:43:00 0.363 -1.02  0.168 #> 10 2021-04-06 15:43:00 0.418 -0.996 0.387 #> # … with 29,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/reference/summarise_loading.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise mechanical loading variables — summarise_loading","title":"Summarise mechanical loading variables — summarise_loading","text":"Creates summary table selected mechanical loading variables including number peaks, minimum, maximum, mean standard deviation values peaks also number peaks inside given magnitude range. summaries can displayed day daily average.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_loading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise mechanical loading variables — summarise_loading","text":"","code":"summarise_loading(   data,   variable,   vector,   daily_average = TRUE,   ranges_acc = NULL,   ranges_grf = NULL,   ranges_lr = NULL,   save_summary = FALSE )"},{"path":"https://lveras.com/impactr/reference/summarise_loading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise mechanical loading variables — summarise_loading","text":"data impactr_peaks object, obtained find_peaks() /predict_loading(). variable character vector indicating variable summarise. Can either \"acc\" (acceleration peaks), \"grf\" (ground reaction force peaks), \"lr\" (loading rate peaks) \"\" (variables). vector character string indicating vector use create summaries. Can \"resultant\", \"vertical\" \"\". daily_average Create daily average summary? Can TRUE (default) FALSE. ranges_acc, ranges_grf, ranges_lr numeric vector specify ranges count peaks. E.g., ranges_acc = c(1, 2, 3), summarise number acceleration peaks 1 2g, 2 3g 3g. Set NULL (default) summary range provided. save_summary Indicates whether save summary csv file(s). Defaults FALSE. Provide valid path directory character string save generated summaries.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_loading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise mechanical loading variables — summarise_loading","text":"tibble (list tibbles) requested summaries.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_loading.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise mechanical loading variables — summarise_loading","text":"","code":"# Ensure that {accdata} package is available before running the example. # If it is not, run install_accdata() to install the required package. if (requireNamespace(\"accdata\", quietly = TRUE)) {   data <- import_dataset(\"daily_acc_3d\")   data <- remove_nonwear(data)   data <- filter_acc(data)   data <- find_peaks(data, vector = \"vertical\")   summarise_loading(     data,     variable = \"acc\", vector = \"vertical\",     ranges_acc = 1:5   ) } #> $`Summary per day` #> # A tibble: 3 × 15 #>   filename    date       weekday measu…¹ varia…² n_peaks min_p…³ max_p…⁴ mean_…⁵ #>   <chr>       <date>     <chr>     <int> <chr>     <dbl>   <dbl>   <dbl>   <dbl> #> 1 daily_acc_… 2016-01-20 Wednes…       1 vertic…    2844     1.3    4.92    1.63 #> 2 daily_acc_… 2016-01-21 Thursd…       2 vertic…    2420     1.3    6.29    1.59 #> 3 daily_acc_… 2016-01-22 Friday        3 vertic…    2366     1.3    6.08    1.55 #> # … with 6 more variables: sd_peaks <dbl>, n_peaks_1_to_2_g <dbl>, #> #   n_peaks_2_to_3_g <dbl>, n_peaks_3_to_4_g <dbl>, n_peaks_4_to_5_g <dbl>, #> #   n_peaks_above_5_g <dbl>, and abbreviated variable names ¹​measurement_day, #> #   ²​variable, ³​min_peaks, ⁴​max_peaks, ⁵​mean_peaks #> # ℹ Use `colnames()` to see all variable names #>  #> $`Daily average` #> # A tibble: 1 × 12 #>   filename       varia…¹ n_peaks min_p…² max_p…³ mean_…⁴ sd_pe…⁵ n_pea…⁶ n_pea…⁷ #>   <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 daily_acc_3d.… vertic… 2543.33 1.3     5.76    1.59    0.35    2332.67 188.33  #> # … with 3 more variables: n_peaks_3_to_4_g <chr>, n_peaks_4_to_5_g <chr>, #> #   n_peaks_above_5_g <chr>, and abbreviated variable names ¹​variable, #> #   ²​min_peaks, ³​max_peaks, ⁴​mean_peaks, ⁵​sd_peaks, ⁶​n_peaks_1_to_2_g, #> #   ⁷​n_peaks_2_to_3_g #> # ℹ Use `colnames()` to see all variable names #>"},{"path":"https://lveras.com/impactr/reference/summarise_nonwear.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise accelerometer non-wear time — summarise_nonwear","title":"Summarise accelerometer non-wear time — summarise_nonwear","text":"Validates measurement day based minimum number wear hours validates entire observation based minimum number valid days. updates values wear column (created mark_nonwear()) impactr_data object provided data, marking non-wear time days considered invalid. also creates wear time daily summary can saved csv file.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_nonwear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise accelerometer non-wear time — summarise_nonwear","text":"","code":"summarise_nonwear(data, min_hour_crit, min_day_crit, save_summary)"},{"path":"https://lveras.com/impactr/reference/summarise_nonwear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise accelerometer non-wear time — summarise_nonwear","text":"data impactr_data object wear column, obtained mark_nonwear(). min_hour_crit minimum number hours marked wear time day considered valid. min_day_crit minimum number valid days data given subject considered valid. save_summary Indicates whether save wear time daily summary csv file. Provide valid path file ending \".csv\" extension character string want summary saved.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_nonwear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise accelerometer non-wear time — summarise_nonwear","text":"impactr_data object provided data wear column values updated based validations. data classified valid, returns NULL. Also saves summary csv file save_summary path.","code":""},{"path":"https://lveras.com/impactr/reference/summarise_nonwear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise accelerometer non-wear time — summarise_nonwear","text":"internal function, designed used inside wrapper function remove_nonwear() integrates steps detection, removal inspection accelerometer non-wear time.","code":""},{"path":[]},{"path":"https://lveras.com/impactr/reference/use_resultant.html","id":null,"dir":"Reference","previous_headings":"","what":"Use resultant vector — use_resultant","title":"Use resultant vector — use_resultant","text":"Computes acceleration resultant vector.","code":""},{"path":"https://lveras.com/impactr/reference/use_resultant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use resultant vector — use_resultant","text":"","code":"use_resultant(data)"},{"path":"https://lveras.com/impactr/reference/use_resultant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use resultant vector — use_resultant","text":"data impactr_data object, obtained ","code":""},{"path":"https://lveras.com/impactr/reference/use_resultant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use resultant vector — use_resultant","text":"object class impactr_data acc_R column containing acceleration resultant vector.","code":""},{"path":"https://lveras.com/impactr/reference/use_resultant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use resultant vector — use_resultant","text":"","code":"data <- read_acc(impactr_example(\"hip-raw.csv\")) use_resultant(data) #> # Start time:              2021-04-06 15:43:00 #> # Sampling frequency:      100Hz #> # Accelerometer placement: Non-specified #> # Subject body mass:       Non-specified #> # Filter:                  No filter applied #> # Data dimensions:         30,000 × 5 #>    timestamp           acc_X  acc_Y acc_Z acc_R #>    <dttm>              <dbl>  <dbl> <dbl> <dbl> #>  1 2021-04-06 15:43:00 0.262 -0.688 0.063 0.739 #>  2 2021-04-06 15:43:00 0.25  -0.727 0.039 0.770 #>  3 2021-04-06 15:43:00 0.254 -0.816 0.191 0.876 #>  4 2021-04-06 15:43:00 0.258 -0.891 0.367 0.998 #>  5 2021-04-06 15:43:00 0.281 -0.914 0.344 1.02  #>  6 2021-04-06 15:43:00 0.316 -0.922 0.23  1.00  #>  7 2021-04-06 15:43:00 0.32  -0.891 0.203 0.968 #>  8 2021-04-06 15:43:00 0.332 -0.926 0.109 0.990 #>  9 2021-04-06 15:43:00 0.363 -1.02  0.168 1.10  #> 10 2021-04-06 15:43:00 0.418 -0.996 0.387 1.15  #> # … with 29,990 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://lveras.com/impactr/news/index.html","id":"impactr-041","dir":"Changelog","previous_headings":"","what":"impactr 0.4.1","title":"impactr 0.4.1","text":"Fixed issue saving non-wear plot remove_nonwear() (#2). Change name “valid_observation” “valid_file” non-wear summary better express meaning. Limited number characters non-wear plot title 50 characters, preventing plot title exceed plot window limits. case large (n. char. > 50) titles, remove_nonwear() automatically crops . Return NA summary variables summarise_loading() whenever number detected peaks 0 Change coefficients prediction models walking/running match final version published paper (doi.org/10.1080/17461391.2022.2102437)","code":""},{"path":"https://lveras.com/impactr/news/index.html","id":"impactr-040","dir":"Changelog","previous_headings":"","what":"impactr 0.4.0","title":"impactr 0.4.0","text":"CRAN release: 2022-01-15 Added function remove_nonwear() detect remove accelerometer non-wear time. Added function summarise_loading(). Include interface access example datasets {accdata} package. Run ?import_dataset help. Changed resultant vector computed improve speed. read_acc() longer displays progress bar.","code":""},{"path":"https://lveras.com/impactr/news/index.html","id":"impactr-030","dir":"Changelog","previous_headings":"","what":"impactr 0.3.0","title":"impactr 0.3.0","text":"CRAN release: 2021-11-18 pracma::findpeaks() now used get index curve start. Fixed bug predict_loading() return expected columns outcome set “”. Added new supported model: “jumping”.","code":""},{"path":"https://lveras.com/impactr/news/index.html","id":"impactr-020","dir":"Changelog","previous_headings":"","what":"impactr 0.2.0","title":"impactr 0.2.0","text":"CRAN release: 2021-09-03 define_region() now works multi-day data. See updated documentation. specify_parameters() filter_acc() throw errors called data. prevents attributes accidentally added top existing ones. predict() throws error required attributes missing. Fixed test failure {tibble} release 3.1.4 (#1).","code":""}]
